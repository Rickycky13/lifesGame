from p5 import *
from time import *
ecart = 25
celluleVivante = []

def setup():
    global lancement
    size(800,800)
    fill(0)
    lancement = False




def mouse_pressed():
    global celluleVivante, ecart
    celluleVivante.append((multProche(mouse_x,ecart),multProche(mouse_y,ecart)))

def multProche(val,mult):
    return (val//mult) * mult

def add8voisins(pos):
    global voisins, ecart
    voisins.append((multProche(pos[0],ecart)+ecart,multProche(pos[1],ecart)))
    voisins.append((multProche(pos[0],ecart),multProche(pos[1],ecart)+ecart))
    voisins.append((multProche(pos[0],ecart)+ecart,multProche(pos[1],ecart)+ecart))
    voisins.append((multProche(pos[0],ecart)-ecart,multProche(pos[1],ecart)))
    voisins.append((multProche(pos[0],ecart),multProche(pos[1],ecart)-ecart))
    voisins.append((multProche(pos[0],ecart)-ecart,multProche(pos[1],ecart)-ecart))
    voisins.append((multProche(pos[0],ecart)+ecart,multProche(pos[1],ecart)-ecart))
    voisins.append((multProche(pos[0],ecart)-ecart,multProche(pos[1],ecart)+ecart))
    
def countPos(lst):
    dict = {}
    for i, item in enumerate(lst):
        if item in dict:
            dict[item]+=1
        else:
            dict[item] = 1
    return dict

def rules(dict,cellule):
    lst = []
    for key, value in dict.items():
        if value == 3:
            lst.append(key)
        elif value == 2 and key in cellule:
            lst.append(key)
    return lst

def evolution():
    """ fonction a activer dans draw qui s'occupe de toute l'évolution avec les trois règles"""
    global celluleVivante, voisins
    voisins = []
    for cell in celluleVivante:
        add8voisins(cell)
    nouvelleCellule= rules(countPos(voisins),celluleVivante)
    celluleVivante = nouvelleCellule

def readRLE(filename):
    ''' Read the RLE file and returns a binary matrix '''
    # see http://www.conwaylife.com/wiki/RLE 
    
    # Open file and cast it into a unique string
    f = open(filename,"r")
    s = ''
    while True:
        l = f.readline()
        if l == '':             # Empty indicates end of file. An empty line would be '\n'
            break
        if l[0] =='#':
            continue
        if l[0] =='x':
            continue
        s = s + l[:-1]   # To remove EOL
    f.close()
    
        
    

def draw():
    global celluleVivante, ecart, lancement
    background(255)
    if lancement == True:
        evolution()
        sleep(0.1)
    elif lancement == False:
        fill(0,255,0)
        rect(multProche(mouse_x,ecart),multProche(mouse_y,ecart),ecart,ecart)
    for i in range(len(celluleVivante)):
        fill(0)
        rect(celluleVivante[i][0],celluleVivante[i][1],ecart,ecart)
    if key == 'ENTER':
        lancement = not lancement
        sleep(0.1)

run()
